class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C ParamOrder><<C <todo sym>>> < (<emptyTree>::<C T>::<C Struct>)
    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"bar" => <emptyTree>::<C Integer>, :"foo" => <emptyTree>::<C Integer>}).void()
    end

    def initialize<<C <todo sym>>>(bar:, foo: = <emptyTree>, &<blk>)
      begin
        @foo = ::T.let(foo, <emptyTree>::<C Integer>)
        @bar = ::T.let(bar, <emptyTree>::<C Integer>)
        <emptyTree>
      end
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def foo<<C <todo sym>>>(&<blk>)
      @foo
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"arg0" => <emptyTree>::<C Integer>}).returns(<emptyTree>::<C Integer>)
    end

    def foo=<<C <todo sym>>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({}).returns(<emptyTree>::<C Integer>)
    end

    def bar<<C <todo sym>>>(&<blk>)
      @bar
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"arg0" => <emptyTree>::<C Integer>}).returns(<emptyTree>::<C Integer>)
    end

    def bar=<<C <todo sym>>>(arg0, &<blk>)
      ::Kernel.raise("Sorbet rewriter pass partially unimplemented")
    end

    ::T::Sig::WithoutRuntime.sig() do ||
      <self>.params({:"bar" => <emptyTree>::<C Integer>, :"foo" => <emptyTree>::<C Integer>}).returns(<emptyTree>::<C Integer>)
    end

    def initialize<defaultArg>1<<C <todo sym>>>(bar:, foo: = <emptyTree>, &<blk>)
      3
    end

    ::Sorbet::Private::Static.keep_def(<self>, :"initialize")

    ::Sorbet::Private::Static.keep_def(<self>, :"foo")

    ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

    ::Sorbet::Private::Static.keep_def(<self>, :"bar")

    ::Sorbet::Private::Static.keep_def(<self>, :"bar=")

    ::Sorbet::Private::Static.keep_def(<self>, :"initialize<defaultArg>1")
  end
end
